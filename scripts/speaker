#!/bin/bash

function usage() {
	printf "Switch between pc and tv sound outputs on a pulseaudio level .\n"
	printf "Usage: %s [pc|tv]\n" "$(basename "$0")";
	exit "$1";
}

function get_gsettings_value()
{
	schema=$1
	key=$2
	local __result=$3

	value=$(gsettings get "$schema" "$key")
	ret=$?
	if test 127 -eq $ret; then
		printf "error: \"gsettings\" command not found.\n" 2> /dev/null
		return 1
	fi
	if test 0 -ne $ret; then
		printf "error: \"gsettings get %s %s\" failed.\n" "$schema" "$key" 2> /dev/null
		return 1
	fi
	value=$( echo "$value" | sed -r "s/@[^ ]* '*([^']*)'*/\1/" )
	if test "$value" = "nothing" || test -z "$value"; then
		printf "error: \"gsettings get %s %s\" returned empty value.\n" "$schema" "$key" 2> /dev/null
		return 1
	else
		eval $__result="'$value'"
		return 0
	fi
}

function main()
{
	if [ "$#" -ne "1" ]; then
		printf "error: a wrong number of arguments.\n" 2> /dev/null
		exit 1;
	fi

	tv_sink=""
	pc_sink=""

	if [ "$1" = "-h" ]; then
		usage 0;
	elif [ "$1" = "pc" ]; then
		if test -z "$pc_sink"; then
			get_gsettings_value com.github.svlc.theater-setup \
							  pulseaudio-primary-sink pc_sink
			if test 0 -ne $?; then
				exit 1
			fi;
		fi;
		wanted_sink="$pc_sink"
	elif [ "$1" = "tv" ]; then
		if test -z "$tv_sink"; then
			get_gsettings_value com.github.svlc.theater-setup \
							  pulseaudio-secondary-sink tv_sink
			if test 0 -ne $?; then
				exit 1
			fi;
		fi;
		wanted_sink="$tv_sink"
	else
		printf "error: an unrecognized argument.\n" 2> /dev/null
		exit 1;
	fi

	# find if the cache for "module-stream-restore" is turned off
	# https://www.freedesktop.org/wiki/Software/PulseAudio/Documentation/User/DefaultDevice/
	ret=$(pacmd list-modules | sed -r -n '{/name: <module-stream-restore>/,/argument:/!d; /argument:\s*<restore_device=false>/p }')

	# if the cache is on
	if [ -z "$ret" ]; then
		pacmd "unload-module module-stream-restore"
		pacmd "load-module" "module-stream-restore" "restore_device=false"
	fi

	printf "pacmd %s %s\n" "set-default-sink" "$wanted_sink" 2> /dev/null
	pacmd "set-default-sink" "$wanted_sink"

	# find all indexes that are not redirected to our $wanted_sink
	# 1.) if "index:" string matches, save it to the hold space and end a cycle
	# 2.) if "sink:" string does not match, end a cycle
	# 3.) if our $wanted_sink string matches, end a cycle
	# 4.) put our hold space to the pattern space
	# 5.) remove all but digits from the pattern space and print it
	#                                                    1.)              2.)         3.)              4.) 5.)
	active_inputs=$( pacmd list-sink-inputs | sed -r -n '/index:/{h;b}; {/sink:/!b; /'$wanted_sink'/b; g;  s/[^0-9]+//p}' );

	# redirect all relevant inputs to the wanted sink
	for input in $active_inputs; do
		pacmd "move-sink-input" "$input" "$wanted_sink"
	done;
}

main "$@"
exit 0;
