#! /usr/bin/env bash

function usage() {
    printf "Turn the bluetooth controller connection  on/off\n"
    printf "Usage: %s [start|stop]\n" "$(basename "$0")";
    exit "$1";
}

function get_gsettings_value()
{
	schema=$1
	key=$2
	local __result=$3

	value=$(gsettings get "$schema" "$key")
	ret=$?
	if test 127 -eq $ret; then
		printf "error: \"gsettings\" command not found.\n" 2> /dev/null
		return 1
	fi
	if test 0 -ne $ret; then
		printf "error: \"gsettings get %s %s\" failed.\n" "$schema" "$key" 2> /dev/null
		return 1
	fi
	value=$( echo "$value" | sed -r "s/@[^ ]* '*([^']*)'*/\1/" )
	if test "$value" = "nothing" || test -z "$value"; then
		printf "error: \"gsettings get %s %s\" returned empty value.\n" "$schema" "$key" 2> /dev/null
		return 1
	else
		eval $__result="'$value'"
		return 0
	fi
}

function controller_connection_countdown()
{
    for ((i=0,val=20; i<=100; i+=5, --val)); do
        echo "$i"
        echo "# Turn the controller on.\n $val";
        sleep 1;
    done | zenity --progress --title="Request" --text="Turn the controller on." --percentage="0" --auto-close

    return $?
}

function run_expect()
{
    bash_adapter_mac_addr="$1"
    bash_controller_mac_addr="$2"
    bash_proc_name="$3"

    expect <<EOF

    proc check_and_select_adapter {adapter_mac_addr controller_mac_addr} {

        set timeout 3

        expect {
            -re "\$adapter_mac_addr.*" { }
            default {
                spawn zenity --timeout=10 --info "--text=Bluetooth adapter with MAC address \"\$adapter_mac_addr\" is not present.";
                wait
                return 1
            }
        }

        send "select \$adapter_mac_addr\r"
        sleep 0.5

        return 0
    }

    proc disconnect {adapter_mac_addr controller_mac_addr spawn_id} {

        set timeout 2

        send "info \$controller_mac_addr\r"
        expect {
            -re "Connected: no.*" { spawn zenity --timeout=10 --info "--text=Controller is already disconnected."; wait; return 1; }
            -re "Connected: yes.*" { }
        }

        set timeout 8
        send "disconnect \$controller_mac_addr\r"

        expect {
            -re "Connected: no.*" { spawn zenity --timeout=10 --info "--text=Controller disconnected."; }
            default {
                spawn zenity --timeout=10 --info "--text=Disconnecting of the controller failed.";
                wait
                return 1
            }
        }
        send "quit\r"
        expect eof
        return 0;
    }

    proc connect {adapter_mac_addr controller_mac_addr spawn_id} {

        set timeout 2

        send "power on\r"
        expect {
            -re "succeeded.*" { }
            default {
                spawn zenity --timeout=10 --info "--text=\"Power on\" command failed.";
                wait
                return 1
            }
        }

        send "info \$controller_mac_addr\r"
        expect {
            -re "Connected: no.*" { }
            -re "Connected: yes.*" {
                spawn zenity --timeout=10 --info "--text=Controller is already connected!";
                wait
                return 1
            }
        }

        send "agent on\r"
        expect {
            -re "registered.*" { }
            default {
                spawn zenity --timeout=10 --info "--text=\"Power on\" command failed.";
                wait
                return 1
            }
        }

        send "default-agent\r"
        expect {
            -re "successful.*" { }
            default {
                spawn zenity --timeout=10 --info "--text=\"default-agent\" command failed.";
                wait
                return 1
            }
        }

        # save "spawn_id" of the main process
        set spawn_id_main \$spawn_id
        spawn bash -c controller_connection_countdown;

        set spawn_id_bash \$spawn_id;
        set spawn_id_zenity "";

        set count 10;
        set timeout 1;

        while {1} {
            set spawn_id \$spawn_id_bash
            expect {
                eof {
                    lassign [wait] pid sp_id os_error status
                    if { \$os_error != 0 || \$status != 0 } {
                        set spawn_id \$spawn_id_main;
                        return 1;
                    }
                }
            }
            
            set spawn_id \$spawn_id_main
            expect {
                -re "Connected: yes.*" {
                    close -i \$spawn_id_bash;
                    wait -i \$spawn_id_bash;

                    spawn zenity --timeout=20 --info "--text=Connection is on.";
                    set spawn_id_zenity \$spawn_id
                    set spawn_id \$spawn_id_main
                    break;
                }
            }
            incr count -1
            if { \$count == 0 } {
                spawn zenity --timeout=10 --info "--text=Time is out, connection failed. Try again.";
                set spawn_id_zenity \$spawn_id
                set spawn_id \$spawn_id_main
                break;
            }
        }

        send "quit\r"
        expect eof
        wait -i \$spawn_id_zenity;
        return 0;
    }

    set adapter_mac_addr $bash_adapter_mac_addr
    set controller_mac_addr $bash_controller_mac_addr;

    spawn bluetoothctl;

    set ret [ check_and_select_adapter \$adapter_mac_addr \$controller_mac_addr ];
    if {\$ret != 0} {
        exit \$ret;
    }

    set ret [ $bash_proc_name \$adapter_mac_addr \$controller_mac_addr \$spawn_id ];
    exit \$ret;

EOF
}

function connect()
{
    export -f controller_connection_countdown;
    run_expect $1 $2 "connect"
    
    if [ "$?" -eq "0" ]; then
        antimicro --tray --profile /usr/local/etc/antimicro_controller.amgp &
    fi
}

function disconnect()
{
    run_expect $1 $2 "disconnect"

    if [ -n "$(pgrep antimicro)" ]; then
        killall antimicro;
    fi;

}

function main()
{
        if [ "$#" -ne "1" ]; then
                printf "error: a wrong number of arguments.\n"
                exit 1;
        fi

        bluetooth_adapter_mac_addr=""
        bluetooth_controller_mac_addr=""

		if test -z "$adapter_mac_addr"; then
			get_gsettings_value com.github.svlc.theater-setup \
							  bluetooth-adapter-mac-address bluetooth_adapter_mac_addr
			if test 0 -ne $?; then
				exit 1
			fi;
		fi;

		if test -z "$controller_mac_addr"; then
			get_gsettings_value com.github.svlc.theater-setup \
							  bluetooth-controller-mac-address bluetooth_controller_mac_addr
			if test 0 -ne $?; then
				exit 1
			fi;
		fi;


        if [ "$1" = "-h" ]; then
                usage 0
        elif [ "$1" = "stop" ]; then
                disconnect $bluetooth_adapter_mac_addr $bluetooth_controller_mac_addr
        elif [ "$1" = "start" ]; then
                connect $bluetooth_adapter_mac_addr $bluetooth_controller_mac_addr
        else
                printf "error: an unrecognized argument.\n"
                exit 1;
        fi
}

main "$@"
exit 0;
